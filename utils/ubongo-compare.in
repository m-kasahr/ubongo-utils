#! @RUBY@
# -*- ruby -*-

require 'getoptlong'

# Program version.
PROGRAM_VERSION = '@PACKAGE_VERSION@'

#
# Find a file in directories.
#
def find_file(file_name, directories)
  if file_name !~ /^\//
    directories.each do |directory|
      path = directory + '/' + file_name
      if ((File.stat(path).file?) rescue false)
          return path
      end
    end
  end

  if ((File.stat(file_name).file?) rescue false)
    return file_name
  end

  warn("#{$0}: failed to find a file: #{file_name}")
  return
end

#
# Read a matrix file.
#
def read_matrix_file(file_path)
  if file_path == '-'
    file = $stdin
  else
    if (file = open(file_path, 'r') rescue nil) == nil
      warn("failed to open the matrix file, #{$!}: #{file_path}")
      return
    end
  end

  matrix = Array.new
  while ((line = file.gets) rescue nil) != nil
    line.chop!
    break if line == nil
    matrix.push(line.split(''))
  end
  file.close

  return matrix
end

#
# Normalize matrix data.
#
def normalize_matrix(matrix)
  # Get width of `matrix'.
  matrix_width = 0
  matrix.each do |line|
    matrix_width = line.length if line.length > matrix_width
  end

  # Make all lines in `matrix' have the same width.
  matrix.each do |line|
    line.push(*['.'] * (matrix_width - line.length))
  end

  leftmost_square = matrix_width
  rightmost_square = 0
  matrix.each do |line|
    index  = line.index('#')
    rindex = line.rindex('#')
    leftmost_square  = index  if index  != nil && leftmost_square  > index
    rightmost_square = rindex if rindex != nil && rightmost_square < rindex
  end

  matrix.each do |line|
    line.slice!(rightmost_square + 1, line.length - rightmost_square - 1)
    line.slice!(0, leftmost_square)
  end

  # Delete empty lines on top and bottom of the shape.
  matrix.pop   while matrix.length > 0 && matrix[-1].index('#') == nil
  matrix.shift while matrix.length > 0 && matrix[ 0].index('#') == nil
end

#
# Rotate matrix data.
#
def rotate_matrix(matrix, index)
  #
  # Rotation vectors.
  #                                 |  x   |
  # |x'| = | cos(r) -sin(r) dx1 dx2||  y   |
  # |y'|   |-sin(r)  cos(r) dy1 dy2||width |
  #                                 |height|
  vectors = [[ 1,  0,  0,  0,   0,  1,  0,  0],
             [ 0, -1,  0,  1,   1,  0,  0,  0],
             [-1,  0,  1,  0,   0, -1,  0,  1],
             [ 0,  1,  0,  0,  -1,  0,  1,  0],
             [-1,  0,  1,  0,   0,  1,  0,  0],
             [ 0, -1,  0,  1,  -1,  0,  1,  0],
             [ 1,  0,  0,  0,   0, -1,  0,  1],
             [ 0,  1,  0,  0,   1,  0,  0,  0]]

  max_x = matrix[0].length - 1
  max_y = matrix.length - 1
  result_matrix = []
  v = vectors[index]

  for y1 in 0 .. max_y
    for x1 in 0 .. max_x
      x2 = v[0] * x1 + v[1] * y1 + v[2] * max_x + v[3] * max_y
      y2 = v[4] * x1 + v[5] * y1 + v[6] * max_x + v[7] * max_y
      result_matrix[y2] = [] if result_matrix[y2] == nil
      result_matrix[y2][x2] = matrix[y1][x1]
    end
  end

  return result_matrix
end

#
# Compare matrix data exactly.
#
def compare_exact_matrixes(matrix0, matrix1)
  max_x0 = matrix0[0].length - 1
  max_y0 = matrix0.length - 1

  max_x1 = matrix1[0].length - 1
  max_y1 = matrix1.length - 1

  if  max_x0 != max_x1 || max_y0 != max_y1
    return false
  end
    
  for y in 0 .. max_y0
    for x in 0 .. max_x0
      return false if matrix0[y][x] == '#' && matrix1[y][x] != '#'
      return false if matrix0[y][x] != '#' && matrix1[y][x] == '#'
    end
  end

  return true
end

#
# Rotate and compare matrix data.
#
def compare_matrixes(matrix0, matrix1, flip_flag)
  rotation_ids = flip_flag ? 0..7 : 0..3
  rotation_ids.each do |i|
    matrix0_r = rotate_matrix(matrix0, i)
    return true if compare_exact_matrixes(matrix0_r, matrix1)
  end
  return false
end


#
# Print matrix data.
#
def print_matrix(matrix)
  matrix.each do |line|
    line.each do |ch|
      print ch
    end
    print "\n"
  end
end

#
# Initialize variables.
#
$include_directories = []
$flip_flag = true

#
# Parse command line options.
#
$options =
  GetoptLong.new(['--directory',  '-d', GetoptLong::REQUIRED_ARGUMENT],
                 ['--help',       '-h', GetoptLong::NO_ARGUMENT],
                 ['--no-flip',    '-n', GetoptLong::NO_ARGUMENT],
                 ['--version',    '-v', GetoptLong::NO_ARGUMENT])
$try_help = "Try '#{$0} --help' for more details."

begin
  $options.each do |name, argument|
    case name
    when '--directory'
      $include_directories.push(argument)
    when '--help'
      print "Usage: ubongo-compare [option...] MATRIX1-FILE MATRIX2-FILE\n"
      print "Options:\n"
      print "  -d DIR, --directory=DIR\n"
      print "                 Also search DIR for color and matrix files.\n"
      print "                 Prior to UBONGO_INCLUDES.\n"
      print "  -h, --help     Give this help, then exit.\n"
      print "  -n, --no-flip  Pieces cannot be flipped.\n"
      print "  -v, --version  Display version number, then exit.\n"
      print "\n"
      print "Arguments:\n"
      print "  MATRIX-FILE1   Input matrix file.\n"
      print "  MATRIX-FILE2   Input matrix file.\n"
      print "\n"
      print "Environment Variables:\n"
      print "  UBONGO_INCLUDES=DIR:...\n"
      print "                 Also search DIR... for color and matrix files.\n"
      exit(0)
    when '--no-flip'
      $flip_flag = false
    when '--version'
      print "ubongo-compare version #{PROGRAM_VERSION}\n"
      exit(0)
    end
  end
rescue
  warn($try_help)
  exit(1)
end

if ARGV.length < 2
  warn("#{$0}: too few argument.")
  warn($try_help)
  exit(1)
end

if ENV.key?('UBONGO_INCLUDES')
  $include_directories += ENV['UBONGO_INCLUDES'].split(':')
end

$nfiles = ARGV.length
$matrix_file_paths = []
$matrixes = []

#
# Read a matrix file.
#
ARGV.each_index do |i|
  if i == '-'
    $matrix_file_paths[i] = ARGV[i]
  else
    $matrix_file_paths[i] = find_file(ARGV[i], $include_directories)
    if $matrix_file_paths[i] == nil
      exit(1)
    end
  end
  $matrixes[i] = read_matrix_file($matrix_file_paths[i])
  normalize_matrix($matrixes[i])
end

for i in 0 .. $nfiles - 2
  for j in i + 1 .. $nfiles - 1
    if compare_matrixes($matrixes[i], $matrixes[j], $flip_flag)
      print "matched: #{ARGV[i]}\n"
      print "     and #{ARGV[j]}\n"
    end
  end
end

exit(0)
