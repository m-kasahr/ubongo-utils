subdir = lib/ubongo
top_builddir = ../..
srcdir = @srcdir@
top_srcdir = $(srcdir)/$(top_builddir)
VPATH = @srcdir@

PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PACKAGE = $(PACKAGE_NAME)-$(PACKAGE_VERSION)

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
datarootdir = @datarootdir@
datadir = @datadir@
pkgdatadir = $(datadir)/$(PACKAGE_NAME)
pkgdataorigdir = $(pkgdatadir)/orig
pkgdatadueldir = $(pkgdatadir)/duel
pkgdataminibdir = $(pkgdatadir)/minib
pkgdataminigdir = $(pkgdatadir)/minig
pkgdataminirdir = $(pkgdatadir)/minir
pkgdataminiydir = $(pkgdatadir)/miniy
pkgdata3ddir = $(pkgdatadir)/3d
includedir = @includedir@
ubongoincludedir = $(includedir)/ubongo
ubongo3dincludedir = $(includedir)/ubongo3d
pkgdocdir = @pkgdocdir@

CXX = @CXX@
RANLIB = @RANLIB@
LIBTOOL = @LIBTOOL@
SHELL = @SHELL@
RUBY = @RUBY@
CONVERT = @CONVERT@
MARKDOWN = @MARKDOWN@
MKDIR_P = @MKDIR_P@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@

DEFS = 
INCLUDES = -I$(srcdir)/..
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@
LIB_VERSION_INFO = @LIBUBONGO_VERSION_INFO@
LIBS = 

dataorig_srcdir = $(top_srcdir)/data/orig
dataduel_srcdir = $(top_srcdir)/data/duel
dataminib_srcdir = $(top_srcdir)/data/minib
dataminig_srcdir = $(top_srcdir)/data/minig
dataminir_srcdir = $(top_srcdir)/data/minir
dataminiy_srcdir = $(top_srcdir)/data/miniy

libubongo_HEADERS = analyzer.h board.h common.h piece.h pieceset.h \
                    pieceset_dir.h pieceset_orig.h pieceset_duel.h \
                    pieceset_minib.h pieceset_minig.h pieceset_minir.h \
                    pieceset_miniy.h puzzle.h solver.h
libubongo_SOURCES = analyzer.cpp board.cpp piece.cpp pieceset.cpp \
                    pieceset_dir.cpp puzzle.cpp solver.cpp
libubongo_OBJECTS = analyzer.lo board.lo piece.lo pieceset.lo \
                    pieceset_dir.lo puzzle.lo solver.lo

DISTFILES = Makefile.in make-pieceset.rb $(libubongo_SOURCES) \
            analyzer.h board.h common.h piece.h pieceset.h puzzle.h solver.h
CLEANFILES = pieceset_orig.h pieceset_duel.h pieceset_minib.h \
             pieceset_minig.h pieceset_minir.h pieceset_miniy.h
LIBTOOL_CLEANFILES = libubongo.la $(libubongo_OBJECTS)

.SUFFIXES:
.SUFFIXES: .cpp .lo

.PHONY: all clean distclean install uninstall dist-local test

.cpp.lo:
	$(LIBTOOL) --mode=compile --tag=CXX $(CXX) $(DEFS) $(INCLUDES) \
	    $(CXXFLAGS) -o $@ -c $<

all: libubongo.la $(libubongo_HEADERS)

install: all
	$(MKDIR_P) $(DESTDIR)$(libdir)
	$(LIBTOOL) --mode=install $(INSTALL_PROGRAM) libubongo.la \
	    $(DESTDIR)$(libdir)/libubongo.la
	$(LIBTOOL) --mode=finish $(DESTDIR)$(libdir)
	$(MKDIR_P) $(DESTDIR)$(ubongoincludedir)
	for i in $(libubongo_HEADERS); do \
	    $(INSTALL_DATA) $(srcdir)/$$i \
	        $(DESTDIR)$(ubongoincludedir)/$$i; \
	done

uninstall:
	$(LIBTOOL) --mode=uninstall rm -f $(DESTDIR)$(libdir)/libubongo.la
	for i in $(libubongo_HEADERS); do \
	    test -f $(DESTDIR)$(ubongoincludedir)/$$i || continue; \
	    rm -f $(DESTDIR)$(ubongoincludedir)/$$i; \
	done
	-rmdir $(DESTDIR)$(ubongoincludedir)

clean:
	-$(LIBTOOL) --mode=clean rm -f $(LIBTOOL_CLEANFILES)
	-rm -f $(CLEANFILES)

distclean: clean
	-rm -f Makefile

dist-local:
	$(MKDIR_P) $(top_builddir)/$(PACKAGE)/$(subdir)
	for i in $(DISTFILES); do \
	    cp -p $(srcdir)/$$i $(top_builddir)/$(PACKAGE)/$(subdir)/$$i; \
	done

test:

libubongo.la: $(libubongo_OBJECTS)
	$(LIBTOOL) --mode=link --tag=CXX $(CXX) $(LDFLAGS) -o $@ \
	    -version-info $(LIB_VERSION_INFO) -rpath $(libdir) \
	    $(libubongo_OBJECTS)

analyzer.lo: analyzer.cpp board.h pieceset.h puzzle.h solver.h
board.lo: board.cpp board.h piece.h common.h
piece.lo: piece.cpp piece.h common.h
pieceset.lo: pieceset.cpp pieceset.h piece.h
pieceset_dir.lo: pieceset_dir.cpp pieceset_dir.h pieceset.h
puzzle.lo: puzzle.cpp puzzle.h board.h piece.h common.h
solver.lo: solver.cpp solver.h puzzle.h board.h piece.h common.h

pieceset_orig.h: $(srcdir)/make-pieceset.rb
	rm -f $@
	$(RUBY) $(srcdir)/make-pieceset.rb Orig $(dataorig_srcdir) > $@

pieceset_duel.h: $(srcdir)/make-pieceset.rb
	rm -f $@
	$(RUBY) $(srcdir)/make-pieceset.rb Duel $(dataduel_srcdir) > $@

pieceset_minib.h: $(srcdir)/make-pieceset.rb
	rm -f $@
	$(RUBY) $(srcdir)/make-pieceset.rb MiniB $(dataminib_srcdir) > $@

pieceset_minig.h: $(srcdir)/make-pieceset.rb
	rm -f $@
	$(RUBY) $(srcdir)/make-pieceset.rb MiniG $(dataminig_srcdir) > $@

pieceset_minir.h: $(srcdir)/make-pieceset.rb
	rm -f $@
	$(RUBY) $(srcdir)/make-pieceset.rb MiniR $(dataminir_srcdir) > $@

pieceset_miniy.h: $(srcdir)/make-pieceset.rb
	rm -f $@
	$(RUBY) $(srcdir)/make-pieceset.rb MiniY $(dataminiy_srcdir) > $@

